import java.util.function.Predicate
import java.util.stream.Collectors

pluginManagement {
    repositories {
        /* 本地仓库地址 */
        maven { url "D:/SoftWare/Maven/repository" }
        /* 公司仓库地址 */
        maven { url "http://192.168.44.155/nexus/content/groups/public/" }
        /* 插件门户地址 */
        gradlePluginPortal()
    }
}

rootProject.name = 'plugin-starter'

/* 自动引入项目及模块 */
fileTree(rootDir) {
    include '**/*.gradle'
    exclude '**/settings.gradle'
    exclude '**/buildSrc'
}.files.stream()
        .filter(new Predicate<File>() {
            @Override
            boolean test(File file) {
                String relativeName = rootDir.relativePath(file.parentFile)
                return "" != relativeName
            }
        })
        .collect(Collectors.toList())
        .each {
            println(it)
//          println "${projectPath(it)} => ${projectName(it)} => ${it.parentFile}"
            include projectPath(it)
            project(projectPath(it)).projectDir = it.parentFile
            project(projectPath(it)).name = projectName(it)
        }
/**
 * 项目路径
 * @param file
 * @return String
 */
String projectPath(File file) {
    return ":${rootDir.relativePath(file.parentFile).replace("/", ":")}"
}

/**
 * 项目名称
 * @param file
 * @return String
 */
String projectName(File file) {
    String[] paths = "${rootDir.relativePath(file.parentFile)}".split("/").reverse()
    return paths[0]
}
